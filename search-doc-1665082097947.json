[{"title":"Introduction","type":0,"sectionRef":"#","url":"","content":"","keywords":""},{"title":"Container Management​","type":1,"pageTitle":"Introduction","url":"#container-management","content":"Rancher Desktop provides the ability to build, push, and pull container images along with the ability to run containers. This is provided by either the Docker CLI (when you choose Moby/dockerd as you engine) or nerdctl (when you choose containerd as your engine). nerdctl is a &quot;Docker-compatible CLI for containerd&quot; provided by the containerd project. "},{"title":"Kubernetes​","type":1,"pageTitle":"Introduction","url":"#kubernetes","content":"Kubernetes is built in to Rancher Desktop. Kubernetes is provided by k3s, a lightweight certified distribution. With Rancher Desktop you have the ability to choose your version of Kubernetes and reset Kubernetes or Kubernetes and the whole container runtime with the click of a button. "},{"title":"Rancher vs Rancher Desktop​","type":1,"pageTitle":"Introduction","url":"#rancher-vs-rancher-desktop","content":"While Rancher and Rancher Desktop share the Rancher name they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop provides a local Kubernetes and container management platform. The two solutions complement each other. If you want to run Rancher on your local system, you can install Rancher into Rancher Desktop. "},{"title":"FAQ","type":0,"sectionRef":"#","url":"faq","content":"FAQ This FAQ is a work in progress designed to answer the questions our users most frequently ask about Rancher Desktop. Q: Is Rancher Desktop a desktop version of Rancher?​ A: While Rancher and Rancher Desktop share the Rancher name, they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop runs local Kubernetes and a container management platform. The two solutions complement each other. Q: Is there a Kubernetes Cluster Explorer available in Rancher Desktop?​ A: Yes, the Rancher Dashboard is included as a feature preview in the release 1.2.1. Invoke the dashboard by clicking on Dashboard option in the system tray menu. To learn more about Rancher Desktop, click here. To learn more about Rancher, click here. Q: Can I have Docker Desktop installed alongside Rancher Desktop?​ A: Yes, but they cannot be run at the same time as both Rancher Desktop and Docker Desktop use the same Docker socket (/var/run/docker.sock). Before starting one, be sure to stop the other first. Q: How can I perform a clean uninstall of Rancher Desktop?​ A: First, perform a Factory Reset, and then you will uninstall the app. The uninstall process varies based on the operating system. For more information, please refer here. Q: What support, if any, is available for DNS over VPN on Windows?​ A: An alternative DNS resolver for Windows has been implemented to address some of the VPN issues on Windows. It should support DNS lookup over VPN connections. It has to be enabled manually by editing an internal configuration file. Q: What does the &quot;WSL Integration&quot; tab do?​ A: This makes the Kubernetes configuration accessible in the displayed WSL distributions so that you can use commands such as kubectl to communicate with Kubernetes. Q: Where can I find detailed logs?​ A: Click on the Troubleshooting tab, then click on Show Logs. Q: How can I enable the dashboard for the Traefik ingress controller?​ A: The Traefik dashboard is not exposed by default, for security reasons. However, it is possible to expose the dashboard in multiple ways. For instance, you can use one of the two approaches shown below. Using port-forward to enable dashboard access​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 Visit http://127.0.0.1:9000/dashboard/ in your browser to view the Traefik dashboard. Using HelmChartConfig to enable dashboard access​ Copy the instructions below into a file, for example, expose-traefik.yaml apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true Run the command kubectl apply -f expose-traefik.yaml Visit http://127.0.0.1:9000/dashboard/ in your browser to view the Traefik dashboard. Q: How can I disable Traefik, and will doing so remove Traefik resources?​ A: Yes, you can disable Traefik in order to free up port 80 and 443 for alternate ingress configuration. Disabling Traefik will not delete existing resources. By default, the Enable Traefik feature is selected under Kubernetes Settings; uncheck this box to disable it. If you want to delete Traefik resources, click on Reset Kubernetes on the Kubernetes Settings panel of the UI. Q: Is there support for internal container port forwarding?​ A: Yes, support has been enabled again for this feature on Linux and macOS. Q: Does file sharing work similarly to Docker Desktop? Do I have to do any additional configuration to mount volumes to VMs?​ A: Currently, the following directories are shared by default: /Users/$USER on macOS, /home/$USER on Linux, and /tmp/rancher-desktop on both. For Windows, all files are automatically shared via WSL2. Q: Can containers reach back to host services via host.docker.internal?​ A: Yes. On Windows, you may need to create a firewall rule to allow communication between the host and the container. You can run below command in a privileged powershell to create the firewall rule. New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow Q: I don't need the Kubernetes cluster deployed by Rancher Desktop; how do I disable it to save resources?​ A: Kubernetes can be disabled to run just containerd or dockerd by itself for reduced resource consumption. By default, the Enable Kubernetes feature is selected under Kubernetes Settings; uncheck this box to disable it. Q: What's happening to the Kubernetes Image Manager (kim)?​ A: As of version 1.0 Kim is no longer shipped and has been replaced by nerdctl and the Docker CLI. Q: Running brew install rancher is failing with a It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' error, why?​ A: If any of the Rancher Desktop supporting utilities (Helm, kubectl, nerdctl, docker) are already managed by Homebrew, then the installation fails due to how the Homebrew cask formula is defined. Installing using the Mac app will avoid this issue. Q: I installed nerdctl through the Arch User Repository, but it doesn't work with Rancher Desktop, why?​ A: For Rancher Desktop, nerdctl must run inside the VM and not on the host. The host version is just a shell wrapper to execute the command inside the VM. Q: The tools on the Support Utilities page are not installed and I see a Insufficient permission to manipulate /usr/local/bin error, how do I fix it?​ A: This occurs when you do not have ownership of /usr/local/bin. A long-term solution to improve the handling of permissions is in the works. In the meantime, a temporary workaround is to change ownership of /usr/local/bin by running sudo chown $USER /usr/local/bin. When you are able to write to the directory, Rancher Desktop is able to create the symlinks. From versions 1.3.0 and above, we no longer create symlinks in /usr/local/bin but in ~/.rd/bin and put that directory on the PATH instead, to avoid having to deal with write permissions to /usr/local/bin and file conflicts. We strongly recommend you to upgrade to the latest version of Rancher Desktop. Q: Is Cygwin compatible with Rancher Desktop?​ A: No, but there are plans to add compatibility. Q: How can I add Rancher Desktop to the startup programs list on Windows?​ A: On Windows, you can add a program to startup programs list in different ways. For example, you can use below steps. - Press Windows+R to open the Run dialog box. - Type `shell:startup` and then hit Enter to open the Startup folder. - Copy &quot;Rancher Desktop&quot; shortcut from Desktop and paste in Startup folder. - Restart your machine. Q: Where does Rancher Desktop actually put the data volumes?​ A: Windows:Open Run menu (Press Windows + R) and open the path provided below, depending on the active container runtime. dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS &amp; Linux:Navigate to the path provided below in the (lima) VM, depending on the active container runtime. You can use rdctl shell to access these paths in the VM. dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; ","keywords":""},{"title":"Features","type":0,"sectionRef":"#","url":"getting-started/features","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"Features","url":"getting-started/features#general","content":"The General tab provides information on communication channels where users can connect with the Rancher Desktop team and community to ask questions, report bugs, or discuss Rancher Desktop in general. "},{"title":"Port Forwarding​","type":1,"pageTitle":"Features","url":"getting-started/features#port-forwarding","content":"To forward a port: Find the service and click Forward.Specify a port to use or use the randomly assigned port.Click the ✓ button to confirm your selection.Optional: click Cancel to remove the port assigned. "},{"title":"Images​","type":1,"pageTitle":"Features","url":"getting-started/features#images","content":"The Images tab, allows you to manage the images on your virtual machine. To manage your images using nerdctl instead, refer to the Images section. "},{"title":"Scanning Images​","type":1,"pageTitle":"Features","url":"getting-started/features#scanning-images","content":"This feature uses Trivy to scan your images for vulnerabilities and configuration issues. To scan an image: From the image list, find the image you want to scan.Click ⋮ &gt; Scan.A summary of the vulnerabilities, sorted by the level of severity, are displayed.Click &gt; to view the details of each vulnerability, including reference links to learn more about the particular vulnerability. "},{"title":"Adding Images​","type":1,"pageTitle":"Features","url":"getting-started/features#adding-images","content":"Pulling Images​ Use this option to pull images from a registry to your virtual machine. To pull an image: Click the + button in the top-right corner.Click on the Pull tab.Enter the name of the image to pull. Note: By default, images are pulled from Docker Hub which uses the repo/image[:tag] format. To pull from other registries, include the hostname registry.example.com/repo/image[:tag]. Click Pull. Building Images​ Use this option to build an image and add it to your virtual machine. To build an image: Click the + button in the top-right corner.Click on the Build tab.Enter a name for the image being built. E.g., repo/image, repo/image:tag, registry.example.com/repo/image, or registry.example.com/repo/image:tag.Click Build.In the file browser, select the Dockerfile to build an image with. "},{"title":"Troubleshooting​","type":1,"pageTitle":"Features","url":"getting-started/features#troubleshooting","content":""},{"title":"Show Logs​","type":1,"pageTitle":"Features","url":"getting-started/features#show-logs","content":"Use this option to open the folder containing all Rancher Desktop log files. Enable Debug Mode​ Enable debug level logging. "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"Features","url":"getting-started/features#reset-kubernetes","content":"Reset Kubernetes and remove all workloads and configurations. Before the reset occurs, users are presented with a confirmation and the option to also delete container images. To reset Kubernetes: Click Reset Kubernetes. A confirmation window appears.Optional: select whether to also delete container images.Click Reset to proceed. Kubernetes stops and starts again. "},{"title":"Factory Reset​","type":1,"pageTitle":"Features","url":"getting-started/features#factory-reset","content":"Remove the cluster and all other Rancher Desktop settings. To continue The initial setup procedure must be done again. To perform a factory reset: Click Reset. A confirmation window appears.Optional: select whether cached Kubernetes images are kept.Click Factor Reset to proceed. Kubernetes stops and Rancher Desktop closes.Optional: start Rancher Desktop again. "},{"title":"Diagnostics​","type":1,"pageTitle":"Features","url":"getting-started/features#diagnostics","content":"Note: Rancher Desktop doesn't send the diagnostics data to any remote server for processing or storing. The Diagnostics feature runs several checks in the background to detect common problems such as missing minimum requirements, misconfigurations, etc., in your environment to help you self-troubleshoot and fix Rancher Desktop application issues. The diagnostics checks are run every time when the application launches. If there are any problems identified then the count of failed checks is shown next to the Diagnostics menu text in the left navigation bar, indicating that something needs your attention. The Diagnostics tab displays the results of the diagnostics tests, highlighting areas that need attention, and guides you to resolve problems. On this tab you can mute/unmute individual checks if you have a non-standard setup and know that these checks don't apply to your situation. You can also rerun the diagnostics anytime to verify that changes you have made to your environment have rectified the problem.  "},{"title":"Preferences​","type":1,"pageTitle":"Features","url":"getting-started/features#preferences","content":"This page allows you to modify the settings of your Rancher Desktop instance. To access the Preferences, click on the ⚙ icon in the upper-right corner.Use the tabs on the left to access different categories of Rancher Desktop preferences.Update preferences as needed. The preferences available are outlined below.To apply the updates, click Apply. "},{"title":"Application​","type":1,"pageTitle":"Features","url":"getting-started/features#application","content":"WindowsmacOS &amp; Linux Automatic Updates​ When an update is available, users are provided a notification and the release notes for the upgrade target. This happens whether automatic updates are enabled or not. If this option is enabled, the update is downloaded and then installed the next time Rancher Desktop is started. Statistics​ This option allows Rancher Desktop to collect information on how you interact with the Rancher Desktop application. Information such as what workloads you run are not collected. "},{"title":"WSL (Windows)​","type":1,"pageTitle":"Features","url":"getting-started/features#wsl-windows","content":"The option to make the Rancher Desktop Kubernetes configuration accessible to any Linux distributions configured for WSL. Once enabled, you can communicate with the Rancher Desktop Kubernetes cluster using tools like kubectl from within the WSL distribution. With WSL, memory and CPU allocation is configured globally across all Linux distributions. Refer to the WSL documentation for instructions. "},{"title":"Virtual Machine (macOS & Linux)​","type":1,"pageTitle":"Features","url":"getting-started/features#virtual-machine-macos--linux","content":"Memory​ The amount of memory to allocate to Rancher Desktop. The selectable range is based on your system. The red area within the range indicates an allocation that may affect system services. CPUs​ The number of CPUs to allocate to Rancher Desktop. The selectable range is based on your system. The red area within the range indicates an allocation that may affect system services. "},{"title":"Container Runtime​","type":1,"pageTitle":"Features","url":"getting-started/features#container-runtime","content":"Set the container runtime for Rancher Desktop. Users have the option of containerd which provides namespaces for containers and the use of nerdctl or dockerd (moby) which enables the Docker API and the use of the Docker CLI. Only one container runtime will function at a time. When switching to a different container runtime: Workloads and images that have been built or pulled using the existing container runtime are not available on the container runtime being switched to. "},{"title":"Kubernetes​","type":1,"pageTitle":"Features","url":"getting-started/features#kubernetes","content":"Enable Kubernetes​ This option allows you to enable or disable Kubernetes. By disabling Kubernetes, you can run just containerd or dockerd by itself for reduced resource consumption. By default, Kubernetes is enabled. To enable/disable Kubernetes, just check/uncheck the Enable Kubernetes checkbox. The app will be restarted when you enable/disable Kubernetes. Disabling Kubernetes will not delete existing resources and they will be available again when you enable Kubernetes again. Kubernetes Version​ This option presents a list of Kubernetes versions that your Rancher Desktop instance can use. When upgrading: A check is performed to see if the target Kubernetes version is available locally. If not, it downloads the files.Workloads are retained.Images are retained. When downgrading: Workloads are removed.Images are retained. To switch versions: Click the Kubernetes version drop-down menu.Select the version you want to change to. Kubernetes Port​ Set the port Kubernetes is exposed on. Use this setting to avoid port collisions if multiple instances of K3s are running. Enable Traefik​ This option allows you to enable or disable Traefik. By disabling Traefik, you can free up port 80 and 443 for alternate ingress configuration. By default, Traefik is enabled. Disabling Traefik will not delete existing resources. "},{"title":"Create a Multi-Node Cluster with k3d","type":0,"sectionRef":"#","url":"how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"Steps to spin up a multi-node cluster​","type":1,"pageTitle":"Create a Multi-Node Cluster with k3d","url":"how-to-guides/create-multi-node-cluster#steps-to-spin-up-a-multi-node-cluster","content":"Make sure dockerd(moby) is selected as the Container Runtime in the Kubernetes Settings page. Install k3d. wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  Run k3d cluster create command to spin up multi node clusters. For example: k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d sets the newly created cluster as active. You can switch between clusters via kubectl config use-context command. For example: kubectl config use-context k3d-two-node-cluster  To learn more about k3s and k3d, refer to these projects' docs at k3s docs and k3d docs. ⚠️ Please note that the clusters created by k3d are not managed by Rancher Desktop GUI. "},{"title":"Installation","type":0,"sectionRef":"#","url":"getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#macos","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements","content":"Rancher Desktop requires the following on macOS: macOS Catalina 10.15 or higher.Apple Silicon (M1) or Intel CPU with VT-x.Persistent internet connection. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. "},{"title":"Installing Rancher Desktop on macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-rancher-desktop-on-macos","content":"Go to the releases page on GitHub.Find the version of Rancher Desktop you want to download.Expand the Assets section and download Rancher.Desktop-X.Y.Z.dmg, where X.Y.Z is the version of Rancher Desktop.Navigate to the directory where you downloaded the installer to and run the installer. This will usually be the Downloads folder.Double-click the DMG file.In the Finder window that opens, drag the Rancher Desktop icon to the Applications folder.Navigate to the Applications folder and double-click the Rancher Desktop to launch it. After Rancher Desktop is installed, users will have access to these supporting utilities: Helmkubectlnerdctldocker (moby) "},{"title":"Uninstalling Rancher Desktop on macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rancher-desktop-on-macos","content":"Open Finder &gt; Applications.Find Rancher Desktop.Select it and choose File &gt; Move to Trash.To delete the app, Finder &gt; Empty Trash. "},{"title":"Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#windows","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements-1","content":"Rancher Desktop requires the following on Windows: Windows 10 build 1909 or higher. The Home edition is supported.Running on a machine with virtualization capabilities.Persistent internet connection. Rancher Desktop requires Windows Subsystem for Linux on Windows; this will automatically be installed as part of the Rancher Desktop setup. Manually downloading a distribution is not necessary. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. Note: You can use Rancher Desktop as a Non-Admin user on a Windows machine. However, an Admin's intervention is required during the installation process for the below components. WSL2 - You need Admin privileges to install WSL2, which is an essential component of Rancher Desktop.Rancher Desktop Privileged Service - You need Admin privileges to install the Rancher Desktop privileged service, which is required to expose applications/services, running inside containers, on all interfaces on the host machine. However, you can skip the installation of the Rancher Desktop Privileged Service with the limitation that you will not be able to expose applications/services on any interface except 127.0.0.1. "},{"title":"Installing Rancher Desktop on Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-rancher-desktop-on-windows","content":"Go to the releases page on GitHub.Find the version of Rancher Desktop you want to download.Expand the Assets section and download the Windows installer. It will be called Rancher.Desktop.Setup.X.Y.Z.exe, where X.Y.Z is the version of Rancher Desktop.Navigate to the directory where you downloaded the installer to and run the installer. This will usually be the Downloads folder.Review the License Agreement and click I Agree to proceed with the installation.When the installation completes, click Finish to close the installation wizard. "},{"title":"Uninstalling Rancher Desktop on Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rancher-desktop-on-windows","content":"From the taskbar, click the Start menu.Go to Settings &gt; Apps &gt; Apps &amp; features.Find and select the Rancher Desktop entry.Click Uninstall and click it again when the confirmation appears.Follow the prompts on the Rancher Desktop uninstaller to proceed.Click Finish when complete. "},{"title":"Linux​","type":1,"pageTitle":"Installation","url":"getting-started/installation#linux","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements-2","content":"Rancher Desktop requires the following on Linux: A distribution that can install .deb or .rpm packages, or AppImages.A persistent internet connection.An x86_64 processor with either AMD-V or VT-x.Read-write access on /dev/kvm. See below for details. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. "},{"title":"Ensuring You Have Access to /dev/kvm​","type":1,"pageTitle":"Installation","url":"getting-started/installation#ensuring-you-have-access-to-devkvm","content":"On some distributions (Ubuntu 18.04 for example) the user has insufficient privileges to use /dev/kvm, which is required for Rancher Desktop. To check whether you have the required privileges, do: [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  If it outputs insufficient privileges, you need to add your user to thekvm group. You can do this with: sudo usermod -a -G kvm &quot;$USER&quot;  Then reboot in order to make these changes take effect. "},{"title":"pass Setup​","type":1,"pageTitle":"Installation","url":"getting-started/installation#pass-setup","content":"By default, Rancher Desktop uses pass to securely store credentials passed via docker login and nerdctl login. pass requires a small amount of setup if this is the first time it has been used on your machine. If you don't intend to use docker login or nerdctl login you don't have to set uppass - just remember that if you use them in the future, you must set it up or you will run into errors. Once Rancher Desktop is installed, you should create a GPG key. This will be used by pass to secure secrets. You can create a GPG key with: gpg --generate-key  The output should contain something like 8D818FB37A9279E341F01506ED96AD27A40C9C73. This is your key ID. You can then initialize pass by passing this key ID to it: pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  For more information on pass, please see its website. "},{"title":"Installation via .deb Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installation-via-deb-package","content":"Add the Rancher Desktop repository and install Rancher Desktop with: curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"Uninstalling .deb Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-deb-package","content":"You can remove the package, repository, and key with: sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"Installing via .rpm Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-via-rpm-package","content":"Note: RHEL, Fedora, and related distributions package QEMU, which Rancher Desktop uses on Linux, differently than other distributions. To use Rancher Desktop on these distributions, please use the AppImage. To add the repository and install on openSUSE: sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"Uninstalling .rpm Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rpm-package","content":"Ensure that Rancher Desktop has exited (if not, it should appear in the dock) and do: sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"Installing via AppImage​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-via-appimage","content":"First, ensure that pass and gpg are installed. For example, on Fedora: dnf install pass gnupg2  You may download the AppImage here. In order to run it, simply make it executable and execute it. For better integration with your desktop, you may use AppImageLauncher. "},{"title":"Uninstalling AppImage​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-appimage","content":"Simply delete the AppImage. That's it! "},{"title":"Hello World Example","type":0,"sectionRef":"#","url":"how-to-guides/hello-world-example","content":"","keywords":""},{"title":"Example#1 - Build Image & Run Container​","type":1,"pageTitle":"Hello World Example","url":"how-to-guides/hello-world-example#example1---build-image--run-container","content":"Create a folder​ mkdir ../hello-world cd ../hello-world  Create a blank Dockerfile​ On Windows, Create a blank file named Dockerfile On Linux, You can use below command to create a blank Dockerfile vi Dockerfile  Populate the Dockerfile with the command below​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  Build and run the image for verification purposes​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # Remove the image nerdctl rmi helloworld:v1.0  "},{"title":"Example#2 - Build Image & Deploy Container to Kubernetes​","type":1,"pageTitle":"Hello World Example","url":"how-to-guides/hello-world-example#example2---build-image--deploy-container-to-kubernetes","content":"Make sure that you switch the Container Runtime setting in the Kubernetes Settings panel to either dockerd or containerd as needed. Create a folder and add a sample index.html file as follows​ mkdir ../nginx cd ../nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  Create a blank Dockerfile​ On Windows, Create a blank file named Dockerfile On Linux, You can use below command to create a blank Dockerfile vi Dockerfile  Populate the Dockerfile with the command below​ FROM nginx:alpine COPY . /usr/share/nginx/html  Build image from code locally​ ⚠️ Note: Please note that you need to pass the flag --namespace k8s.io to the nerdctl build command, so that nerdctl builds the image and then makes it available in the k8s.io namespace. nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  Deploy to Kubernetes​ Run below command to create and run a pod using the image built in the previous step. ⚠️ Note: Please note that you need to pass the flag --image-pull-policy=Never to use a local image with :latest tag, as :latest tag will always try to pull the images from a remote repository. kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  Point your web browser to localhost:8080, and you will see the message Hello World from NGINX!!. If you prefer to stay on the command line, use curl localhost:8080. Delete the pod and the image​ nerdctldocker kubectl delete pod hello-world # Remove the image nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"Provisioning Scripts","type":0,"sectionRef":"#","url":"how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"Provisioning Scripts","url":"how-to-guides/provisioning-scripts#macos--linux","content":"On macOS and Linux, you can use lima override.yaml to write provisioning scripts. Create override.yaml file at below path macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  Write a provisioning script in the override.yaml file created in the previous step. For example, you can use the below script to increase ulimit for containers. provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  You can also use override.yaml to override/modify a lima configuration setting, for example, to create additional mounts as shown below. mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"Provisioning Scripts","url":"how-to-guides/provisioning-scripts#windows","content":"Caution: You can only utilize these provisioning scripts for Rancher Desktop, version 1.1.0 or later, on Windows. Run Rancher Desktop at least once to allow it to create its configuration. Open the %AppData%\\rancher-desktop\\provisioning directory. An example of the full path: C:\\Users\\Joe\\AppData\\Roaming\\rancher-desktop\\provisioning. Note that any files with a file extension of .start, such as k3s-overrides.start, can be executed when Rancher Desktop starts its Kubernetes backend (if enabled). Such files will run within the Rancher Desktop WSL context. Example flow for .start files: Rancher Desktop internal setupRun provisioning scriptsEnable dockerd or containerd in the UIKubernetes (K3s) As an example, using %AppData%\\rancher-desktop\\provisioning\\insecure-registry.start will allow nerdctl to use insecure registries by default: #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  Note that files with a file extension of .stop, such as wipe-data.stop, can be executed after Rancher Desktop shuts down its Kubernetes backend (if enabled). Such files will run within the same Rancher Desktop WSL context. Example flow for .stop files: Stop k3s, dockerd or containerdRun deprovisioning scripts Important to note: Scripts need to be saved with Unix line endings; line-ending conversion is not done; and files with DOS line endings may produce unexpected results. There are some limitations to the things you can change using provisioning scripts. For example, you cannot change the hard ulimits on WSL2 using provisioning scripts. Please use provisioning scripts with caution and feel free to reach out to the Rancher Desktop team on Slack/Github if you have a specific question about provisioning scripts. "},{"title":"Running When Offline","type":0,"sectionRef":"#","url":"how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Network-Sensitive areas​","type":1,"pageTitle":"Running When Offline","url":"how-to-guides/running-air-gapped#network-sensitive-areas","content":"There are two areas where Rancher Desktop assumes network availability and will recover in an air-gapped situation: Pulling Kubernetes k3s images into the k3s cache directory Using kuberlr as a version-aware wrapper around kubectl, so the client never differs from the Kubernetes server by more than one minor version. "},{"title":"Existing Deployments​","type":1,"pageTitle":"Running When Offline","url":"how-to-guides/running-air-gapped#existing-deployments","content":"If Rancher Desktop has been installed on a machine initially with networked access, it can be run subsequently on that machine after network connectivity has been turned off. The main difference in core functionality is that the list of versions of Kubernetes available in drop-down menus is limited to those versions that have actually been downloaded and stored in the cache. There is a problem using the kubectl client, because of the kuberlr wrapper (Windows users should add the .exe suffix to each executable utility file). In this case, we're discussing a system that was initialized when connected to the internet, but we're about to take the machine offline for future use. Suppose there are three versions of k3s in the rancher-desktop cache. 1.24.3 1.21.14 1.19.16 But suppose that on this system we only ran kubectl when using versions 1.24.3 and 1.21.14. This means that the ~/.kuberlr/PLATFORM-ARCH/ directory (%HOME%/.kuberlr/windows-amd64 on Windows) will contain only two files: kubectl1.24.3 kubectl1.21.14 If we go offline and use the UI to switch to Kubernetes 1.19.16, when kubectl is run, the system will fail. The problem is that kubectl is an alias for kuberlr, which will try to download kubectl 1.19.16 and install it in the .kuberlr directory, but won't be able to access it. So in this case, it would be best to prepare a connected system for disconnecting by selecting each available version of Kubernetes currently in the cache, and running kubectl --context rancher-desktop cluster-info to ensure that an appropriate version of the kubectl client is installed. You could install versioned kubectls manually. This is covered in the next section. "},{"title":"Preparing an Air-Gapped System​","type":1,"pageTitle":"Running When Offline","url":"how-to-guides/running-air-gapped#preparing-an-air-gapped-system","content":"Here we assume you have some kind of removable media which you can populate on an internet-connected system, and then move over to the air-gapped system. There are two directories that need to be populated in order for Rancher Desktop to function off-line: The Cache Directory​ To populate a source disk (which we refer to here as %SOURCEDISK%, although it is probably some kind of removable medium like a USB thumb drive), you need the following files: k3s-versions.json -- this file is created by Rancher Desktop. It reads a raw JSON file from https://update.k3s.io/v1-release/channels and converts it into a different kind of JSON file. Currently there is no utility to do that conversion; the easiest way to get this file is to run Rancher Desktop on a connected system and save the CACHE/k3s-versions.json file (see below for where CACHE exists on different platforms).Tar archives of Kubernetes K3s images. These are listed at https://github.com/k3s-io/k3s/releases, and you'll want to download k3s-airgap-images-amd64.tar or k3s-airgap-images-arm64.tar (for AMD/intel and M1 machines respectively) for the versions you plan on working with. For example, the following commands will let you work with K3s v1.24.3 build 1 offline: cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt  WindowsmacOSLinux On Windows, the cache directory is at %HOME%\\AppData\\Local\\rancher-desktop\\cache\\k3s, and can be created with the command mkdir --Force %HOME%\\AppData\\Local\\rancher-desktop\\cache\\k3s Assuming you have some source media, you would also run the following commands to pre-populate the cache: copy-item %SOURCEDISK%\\k3s-versions.json %HOME%\\AppData\\Local\\rancher-desktop\\cache\\ copy-item -Recurse %SOURCEDISK%\\v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; %HOME%\\AppData\\Local\\rancher-desktop\\cache\\k3s\\  The kuberlr Directory​ The location of this directory is more straightforward. On all platforms, it's at HOME/.kuberlr/PLATFORM-ARCH where: HOME is the home directory: usually %HOMEDRIVE%\\%HOMEPATH on Windows, and ~ or $HOME on macOS and Linux.PLATFORM is one of windows, linux, or darwin.ARCH is aarch64 on M1 machines, and amd64 everywhere else. To populate it, determine which versions of Kubernetes you'll be using, and download the appropriate executables from the internet. These would be in: WindowsmacOS &amp; Linux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl.exe Where: VERSION will have the form vMAJOR.MINOR.PATCH (like v1.22.1),PLATFORM will be one of darwin, linux, or windows,CPU will arm64 on M1 machines and amd64 everywhere else. For example, to get a kubectl for Windows that will work with Kubernetes v1.22, this Windows command-shell (not PowerShell) command will put it on the SOURCEDISK: wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  A Note on Versions​ Kubectl clients are guaranteed to work with servers that are running the same MAJOR version and differ in the MINOR version by at most 1. So for example, if your organization is working with Kubernetes versions v1.21.x, v1.22.x, and v1.23.x, for any patch-version of x, you would only need to install kubectl1.22.x in the .kuberlr directory. But if you copy a v1.24.x of Kubernetes into the CACHE directory, you'll need to ensure there's a compatible kubectl in the .kuberlr directory as well (any of v1.23.x, v1.24.x, or v1.25.x would suffice). "},{"title":"Setup NGINX Ingress Controller","type":0,"sectionRef":"#","url":"how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"Steps​","type":1,"pageTitle":"Setup NGINX Ingress Controller","url":"how-to-guides/setup-NGINX-Ingress-Controller#steps","content":"Uncheck Enable Traefik from the Kubernetes Settings page to disable Traefik. You may need to exit and restart Rancher Desktop for the change to take effect. Deploy the NGINX ingress controller via helm or kubectl. helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  Wait for the ingress pods to come up and running. kubectl get pods --namespace=ingress-nginx  Create a sample deployment and the associated service. kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  Create an ingress resource. The following command uses a host that maps to localhost. kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  Forward a local port to the ingress controller. kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  If you access http://demo.localdev.me:8080/, you should see NGINX Welcome page. "},{"title":"Rancher on Rancher Desktop","type":0,"sectionRef":"#","url":"how-to-guides/rancher-on-rancher-desktop","content":"Rancher on Rancher Desktop While Rancher and Rancher Desktop share the Rancher name, they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop runs local Kubernetes and a container management platform. The two solutions complement each other. For example, you can install Rancher as a workload in Rancher Desktop. This guide outlines steps to install Rancher Dashboard on Rancher Desktop using container runtime or helm (local environment): nerdctldockerhelm nerdctl run --privileged -d --restart=no -p 8080:80 -p 8443:443 rancher/rancher The installation takes a few minutes to complete. After the installation, you can access the Rancher UI as follows: Installed through container runtime: https://localhost:8443/ Installed through helm https://rancher.rd.localhost/ nerdctldocker In order to access the Rancher UI, you need to get the Bootstrap Password: 1: Get Rancher UI container ID/Name: nerdctl ps 2: Get the Bootstrap Password: nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3: Bootstrap Password example: [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq Follow the wizard instructions and click on Continue to land on the main Rancher UI page. From the Rancher UI, you can manage your local cluster, node, and more. For more information, see Rancher Docs.","keywords":""},{"title":"Skaffold and Rancher Desktop","type":0,"sectionRef":"#","url":"how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold and Rancher Desktop Skaffold is a command line tool that facilitates continuous development for Kubernetes-native applications. Skaffold handles the workflow for building, pushing, and deploying your application, and it provides building blocks for creating CI/CD pipelines. This enables you to focus on iterating on your application locally while Skaffold continuously deploys to your local or remote Kubernetes cluster. To learn more about Skaffold, refer to the project docs here. In order to demonstrate the steps to set up Skaffold with Rancher Desktop, a sample nodejs app example is provided within the Rancher Desktop docs repository here. Important: Skaffold only works with dockerd (Moby). Therefore, make sure to select your runtime as dockerd from the Kubernetes Settings panel in the Rancher Desktop UI. Visit https://skaffold.dev/docs/install/ to install Skaffold. Clone the Rancher Desktop docs repository and navigate to the express-sample in a terminal as follows: cd docs.rancherdesktop.io/assets/express-sample Run skaffold init. Per the Skaffold docs,skaffold init walks through your project directory and looks for any build configuration files such as Dockerfile, build.gradle/pom.xml, package.json, requirements.txt, or go.mod. We will select Dockerfile and package.json in our example. This will generate the initial configuration file that you can modify as needed. When prompted, select yes to write your config to skaffold.yaml. In your editor, review your app.js and manifests.yaml files. Note that in manifests.yaml, you will have a deployment config as well as a service config. It is only necessary to have 1 replica for testing purposes. Back in your terminal, you'll notice that you will have two options: skaffold run that lets you build and deploy, and skaffold dev that allows you to enter development mode with auto-redeploy. We will use skaffold dev in this example. As you will need to have push access to the image repository, you can either use your docker login, or you can set up a local registry: Docker HubLocal Registry Before running skaffold dev, use your docker login if you have a Docker Hub account. Then, in the files skaffold.yaml and manifests.yaml replace matamagu/express-sample for YOUR_DOCKER_HUB_USERNAME/express-sample as skaffold dev will push the built image to DockerHub. As you go through your development, Skaffold will detect any changes and will automatically go through the build and deployment process again. You will be able to see any changes reflected in the cluster. Point your web browser to localhost:3000, and you will see the express-sample screen.","keywords":""},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"Steps to try a sample dev container​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#steps-to-try-a-sample-dev-container","content":"Install and launch Rancher Desktop. Select dockerd (moby) as the Container Runtime from the Kubernetes Settings menu.  Install and launch Visual Studio Code or Visual Studio Code Insiders. This tutorial uses Visual Studio Code.  Install the Remote Development extension pack.   After the extension is installed, you will see the extension item in the side bar, and a green button at the lower left corner to show the command palette with various options/commands related to Remote Development.  Microsoft provides a number of sample dev containers at this GitHub repository: https://github.com/microsoft/vscode-dev-containers.git. Clone this repository to your local machine. git clone https://github.com/microsoft/vscode-dev-containers.git  Click on the button at the lower left corner of the window and select Open Folder in Container... from the command palette. Browse to one of the samples in the cloned respository, e.g., javascript-node.   On selecting a sample, you will see the progress notification while the container is being loaded, and once the container is successfully started, the bottom left corner shows the container name. Once the container is started, Press F5 in the VS Code IDE to start the sample application. You will see that the application is started and served on localhost:3000.  Congratulations! You have successfully loaded and run a sample dev container using Rancher Desktop and VS Code. "},{"title":"Next steps​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#next-steps","content":"Microsoft has provided extensive documentation about using dev containers in various scenarios here. Please refer to the following tutorials to try a use case that's relevant to your needs. Happy Containerizing with Rancher Desktop! "},{"title":"Debugging a Container App with VS Code Docker extension","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"Steps to debug a sample application running within a container​","type":1,"pageTitle":"Debugging a Container App with VS Code Docker extension","url":"how-to-guides/vs-code-docker#steps-to-debug-a-sample-application-running-within-a-container","content":"Install and launch Rancher Desktop. Select dockerd (moby) as the Container Runtime from the Kubernetes Settings menu.  Install and launch Visual Studio Code or Visual Studio Code Insiders. This tutorial uses Visual Studio Code.  Install the VS Code Docker extension from the marketplace.   You can use the samples provided at this Github repository, https://github.com/bwateratmsft/samples. Clone this repository and open expressapp folder in your VS Code session. Open the command palette (Ctrl+Shift+P, F1, or Cmd+Shift+P) and run &quot;Add Docker Files to Workspace&quot;. Since this is an Express app, Select Node.js as the Application Platform and 3000 (or any other available port) as the port. As it's a simple example, select No for the Include optional Docker Compose files prompt. This step adds a Dockerfile and Launch Configuration required to debug the application.  Insert a breakpoint in the code.  In the Debug window at the top, switch the active debug configuration to &quot;Docker Node.js Launch&quot;. Press F5 to start the application container in Debug mode. You will see the sample application's landing page opening in your browser, and the code execution stopping at the breakpoint. From here, you can debug the application as if it's running on your host.   Sometimes, the application might not break at the set breakpoint on the first run as the debugging process may not have started. In this case, refresh the browser to trigger the execution again to hit the breakpoint. You can also get around this behavior by setting the property inspectMode: 'break' in task.json file to prevent the app from running until the debugger attaches. On some machines, the firewall settings might prevent the debugging process from establishing a connection between the host and the container processes. In this case, you can add a firewall rule to allow communication between the VM where the container is running and the host where you have the VS Code session running. On Windows, you can add a firewall rule by running the below command from a privileged powershell: New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"Architecture","type":0,"sectionRef":"#","url":"references/architecture","content":"Architecture Rancher Desktop is an electron-based application that wraps other tools while it also provides the user experience to create a simple experience. On macOS and Linux, Rancher Desktop leverages a virtual machine to run containerd or dockerd and Kubernetes. Windows Subsystem for Linux v2 is leveraged for Windows systems. All you need to do is download and run the application.","keywords":""},{"title":"rdctl Command Reference","type":0,"sectionRef":"#","url":"references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl or rdctl help​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-or-rdctl-help","content":"Run rdctl or rdctl help to see the list of available commands. &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Runs API endpoints directly api /vX Enables you to see the endpoints for a particular version; e.g., v0 completion Generates the autocompletion script for the specified shell help Help about any command list-settings Lists the current settings set Updates selected fields in the Rancher Desktop UI and restart the backend shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop or update its settings version Shows the CLI version Flags: --config-path string config file (default C:\\Users\\GunasekharMatamalam\\AppData\\Roaming\\rancher-desktop\\rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-api","content":"Run rdctl api to list all endpoints globally. $ ../../../resources/darwin/bin/rdctl api / | jq -r . [ &quot;GET /&quot;, &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-api-vx","content":"Run rdctl api /v0 to list all endpoints in a specified version. $ rdctl api /v0 | jq -r . [ &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] are commands that are most useful for users working directly with the API itself, and therefore they would not be for everyday use, such as rdctl set might be. For example, a command such as rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  is the same as rdctl set --kubernetes-enabled=false  but less concise and user-friendly. "},{"title":"rdctl list-settings​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI Run rdctl list-settings to see the current active configuration. &gt; rdctl list-settings { &quot;version&quot;: 4, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;1.22.7&quot;, &quot;memoryInGB&quot;: 2, &quot;numberCPUs&quot;: 2, &quot;port&quot;: 6443, &quot;containerEngine&quot;: &quot;moby&quot;, &quot;checkForExistingKimBuilder&quot;: false, &quot;enabled&quot;: true, &quot;WSLIntegrations&quot;: {}, &quot;options&quot;: { &quot;traefik&quot;: true } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;telemetry&quot;: true, &quot;updater&quot;: true, &quot;debug&quot;: false }  "},{"title":"rdctl set​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-set","content":"CLIAPI Run rdctl set [flags] to set properties. In most of the cases, Kubernetes would be reset on running the set command. You can set multiple properties by chaining in a single command. See some examples below. &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI Run rdctl shutdown to gracefully shut down Rancher Desktop. &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-start","content":"CLIAPI Run rdctl start to ensure that Rancher Desktop is running and configured as requested. &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-version","content":"Run rdctl version to see the current rdctl CLI version. &gt; rdctl version rdctl client version: 1.0.0, targeting server version: v0  "},{"title":"Troubleshooting Tips","type":0,"sectionRef":"#","url":"troubleshooting-tips","content":"Troubleshooting Tips This page provides tips to troubleshoot issues you may have with Rancher Desktop. Q: Why do I not see my WSL distro under Rancher Desktop's WSL Integration page?​ A: You are likely using a WSL 1 distro. Rancher Desktop supports only WSL 2 distros. You can convert your WSL 1 distro into a WSL 2 distro by running the command wsl --set-version &lt;distro-name&gt; 2. You can also run the command wsl --set-default-version 2 to set all the future distributions you might install to use WSL 2. Q: I do not see an entry for Rancher Desktop when running kubectl config get-contexts, where is it?​ A: Rancher Desktop places its configuration in the default location, ~/.kube/config, and uses that. Your KUBECONFIG environment variable may be set to look elsewhere for configuration files. Q: Rancher Desktop is stuck on Waiting for Kubernetes API, what do I do?​ A: The cause is hard to determine without additional information. Navigate to the Troubleshooting tab and use the button to access the logs. Then go to the Rancher Desktop GitHub page and file an issue with the logs attached. Q: I can no longer run docker compose after installing Rancher Desktop and uninstalling Docker Desktop, what happened?​ A: This was an issue related to earlier versions (prior to 1.1.0) of Rancher Desktop. Rancher Desktop version 1.1.0 and above comes bundled with docker-compose for you, and makes the cli plugins available at ~/.docker/cli-plugins. We strongly recommend you to be on the latest version of Rancher Desktop. If you still don't see docker-compose available then please file a bug on Github. Q: I'm using Homebrew to install Rancher Desktop, but brew install rancher-desktop is failing, why?​ A: Due to the Homebrew cask naming conventions, the -desktop suffix is dropped from the cask formula name. Use brew install rancher instead. Q: How do I fix permission denied errors when trying to use Docker on WSL?​ A: You need write-permission to access the docker socket. There are many ways to go about that, but this is one of the more common approaches. Using the Ubuntu WSL command-line: sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker Q: How do I fix kubectl: command not found issue on Linux?​ A: By default, Rancher Desktop creates symlinks of kubectl, docker, helm and nerdctl binaries in the /home/&lt;user&gt;/.local/bin directory on Linux. To be able to call these commands directly from the console you may add the directory to your PATH environment variable by executing the following command in console and performing logout and login: echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc Q: How do I fix FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space when running a container using nerdctl run?​ A: You will see this error if there's a route rule with an IP address from a conflicting subnet on the Iptables. The conflicting routes could be either from the host network (bridge mode) or the Kubernetes network. A quick workaround to this issue is to shutdown WSL via the command wsl --shutdown. ⚠️ Please note that shutting down WSL will stop all other distros along with the rancher-desktop distro.","keywords":""},{"title":"Working with Containers","type":0,"sectionRef":"#","url":"tutorials/working-with-containers","content":"","keywords":""},{"title":"Running Containers​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#running-containers","content":"To run a container with the default bridge CNI network (10.4.0.0/24): nerdctldocker nerdctl run -it --rm alpine  To build an image using BuildKit: nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  To build and send output to a local directory using BuiltKit: nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#docker-compose","content":"Docker Compose is a tool for defining and running multi-container Docker applications. nerdctldocker The nerdctl-compose CLI is designed to be compatible with docker-compose: nerdctl compose up -d nerdctl compose down  "},{"title":"Exposing a Port​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#exposing-a-port","content":"To expose port 8000 for a container: nerdctldocker nerdctl run -d -p 8000:80 nginx  You can then access the container via the browser here: http://localhost:8000/. Note: By default the exposed ports are accessible on all network interfaces on macOS and Linux. However, on Windows, the exposed ports are currently only accessible through the localhost network interface (see issue #1180). As a workaround, you can configure a portproxy on the windows host to expose the port to additional network interfaces. netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"Targeting a Kubernetes Namespace​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#targeting-a-kubernetes-namespace","content":"You may also target a Kubernetes namespace with the --namespace parameter with containerd. Please note that docker doesn't use namespaces. nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"Working with Images","type":0,"sectionRef":"#","url":"tutorials/working-with-images","content":"","keywords":""},{"title":"General Usage​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#general-usage","content":"Using either tool requires Rancher Desktop to be running with the appropriate container runtime. For nerdctl, use the containerd runtime. For docker, use the Moby runtime. You can learn about all of the command options and display the help documentation by running: nerdctldocker nerdctl -h Unlike Docker, containerd features its own namespaces. By default, nerdctl images are stored in the default namespace. If you want your images available for use by Kubernetes, use the --namespace k8s.io or -n k8s.io CLI argument. You can also switch to a namespace called default or any other name using the option --namespace &lt;NAMESPACE_NAME&gt;. Note that nerdctl namespaces are separate and independent from Kubernetes and kubectl namespaces. "},{"title":"Listing Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#listing-images","content":"To see the images currently available, run the following command: nerdctldocker nerdctl images  "},{"title":"Building Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#building-images","content":"nerdctldocker Building images has a similar feel to existing tools. For example, consider running nerdctl from a directory with a Dockerfile where the Dockerfile is using a scratch image. nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl has options for tagging at the same time as building and other options you've come to expect. nerdctl build -t TAG . To build an image for use with Kubernetes, specify the k8s.io namespace as follows: nerdctl build -n k8s.io .  "},{"title":"Building Local Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#building-local-images","content":"In order to demonstrate the steps to build local images and run apps, a sample nodejs app is provided within the Rancher Desktop docs repository. To get started, clone the repository and cd into assets/express-sample in a terminal. Run the following command to build image from Dockerfile: nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  Run the following command to run container: kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  Note: When adding the latest tag, be sure to also specify the following: imagePullPolicy: Never  "},{"title":"Tagging Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#tagging-images","content":"If you want to tag an existing image you've built you can use the following command: nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"Removing Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#removing-images","content":"To remove an image, run the following command: nerdctldocker nerdctl rmi IMAGE  "}]